from PIL import Image


def rgb2hex(r, g, b, a):
    return "#{:02x}{:02x}{:02x}".format(r, g, b)


def rgb2light(r, g, b, a=0):
    return (min(r, g, b) + max(r, g, b))/(2*255)

#im = Image.open("hero-image2.png")
im = Image.open("sample.png")
pix = im.load()

d = []


def get_number_by_color(hexcolor):
    if hexcolor == '#fefefe':
        return 1
    elif hexcolor == '#a8b0bd':
        return 2
    elif hexcolor == '#5d697d':
        return 3
    elif hexcolor == '#2d353a':
        return 4
    elif hexcolor == '#1d2227':
        return 5


def get_number_by_light(light_level):
    if light_level > 0.8:
        return 1
    elif light_level > 0.69:
        return 2
    elif light_level > 0.42:
        return 3
    elif light_level > 0.19:
        return 4
    else:
        return 5


def get_colors_from_img_32x64():
    for y in range(64):
        tempdict = []
        for x in range(32):
            tempdict.append(get_number_by_color(rgb2hex(*pix[12 + x * 30, 15 + y * 30])))
        d.append(tempdict)
        y += 1
    return d


list32x64 = [[1, 1, 1, 1, 1, 2, 3, 5, 5, 4, 3, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2, 5, 4, 5, 5, 3, 3, 3, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 4, 3, 1, 1, 1, 1, 1, 1], [1, 1, 2, 3, 5, 5, 4, 5, 3, 3, 4, 5, 5, 5, 5, 5, 5, 4, 4, 3, 3, 3, 3, 3, 4, 5, 5, 3, 1, 1, 1, 1], [1, 2, 5, 3, 4, 4, 4, 4, 4, 5, 4, 4, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 4, 4, 1, 1, 1], [5, 5, 3, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 3, 3, 5, 3, 4, 4, 4, 4, 4, 3, 1], [5, 3, 3, 3, 4, 3, 4, 4, 3, 4, 3, 5, 5, 5, 4, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 5, 4, 5, 5, 5, 1], [5, 3, 3, 3, 3, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 4, 4, 4, 5, 5, 4, 3, 3, 5, 5, 4], [5, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 4, 5, 5, 5, 4, 5, 5, 4], [3, 3, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 3, 4, 5, 5, 5, 5, 4], [3, 4, 4, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 4, 4, 5, 5, 5, 5], [5, 4, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5], [4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5], [4, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], [4, 4, 5, 5, 5, 5, 5, 4, 4, 5, 5, 4, 5, 4, 4, 4, 4, 5, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5], [4, 5, 5, 5, 5, 5, 5, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5], [4, 5, 5, 5, 5, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5], [4, 5, 5, 5, 4, 5, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 5, 5, 5], [4, 5, 5, 4, 4, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 4, 4, 5, 5], [4, 5, 4, 4, 4, 3, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 5, 5, 5], [4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 4, 4, 4], [5, 3, 3, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 4, 4, 4], [4, 3, 5, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 3, 4, 4], [4, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 3, 5, 4], [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 3, 4, 4], [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4], [2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3], [2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 2, 1, 1, 1, 3, 3], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 4, 5, 5, 5, 5, 4, 3, 2, 2, 2, 1, 1, 1, 3, 3], [1, 1, 2, 2, 3, 3, 4, 4, 3, 3, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 3], [1, 2, 3, 3, 5, 5, 5, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3, 4, 5, 5, 4, 5, 5, 5, 3, 3, 3, 2, 2, 1, 1, 1], [1, 2, 2, 2, 2, 3, 3, 5, 5, 5, 4, 4, 3, 2, 3, 2, 3, 5, 5, 5, 3, 5, 4, 4, 2, 5, 3, 2, 2, 1, 1, 1], [1, 2, 2, 3, 4, 5, 4, 5, 5, 5, 4, 4, 3, 2, 3, 2, 3, 4, 5, 4, 4, 3, 3, 3, 3, 1, 3, 2, 2, 1, 1, 1], [1, 2, 3, 4, 4, 2, 5, 4, 3, 4, 4, 3, 3, 2, 3, 2, 2, 4, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1], [1, 2, 3, 2, 2, 2, 3, 3, 3, 4, 3, 3, 2, 2, 3, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1], [1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 2, 1, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 3, 2, 1, 1, 1, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, 1, 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 1, 3, 2, 1, 1, 1, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 2, 3, 2, 1, 1, 1, 1, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 2, 1, 2, 3, 3, 2, 1, 1, 1, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1], [3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 5, 2, 3, 3, 3, 2, 4, 5, 3, 4, 4, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1], [3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 3, 3, 3, 3, 2, 2, 2, 2, 3, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 3, 3, 4, 5, 5, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 4, 4, 3, 3, 4, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 2, 3, 3, 4, 3, 3, 2, 4, 4, 4, 3, 2, 2, 2, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 2, 4, 4, 4, 4, 2, 2, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 2, 3, 3, 3, 3, 4, 3, 2, 2, 2, 3, 4, 2, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 2, 2, 3, 3, 4, 4, 4, 4, 2, 2, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 3, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 4, 5, 5, 4, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 3, 2, 2, 2, 2, 4, 3, 2, 3, 3, 4, 5, 5, 5, 4, 4, 3, 3, 3, 3, 2, 1, 1, 2, 2, 3, 2, 2], [1, 1, 1, 1, 1, 3, 2, 2, 2, 4, 3, 2, 2, 3, 3, 4, 4, 4, 3, 3, 2, 2, 3, 3, 2, 2, 1, 2, 3, 2, 2, 2], [1, 1, 1, 1, 1, 2, 3, 2, 2, 3, 3, 2, 2, 2, 2, 3, 4, 3, 3, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 4, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 3, 3, 3, 2, 3, 2, 4, 3, 4, 2, 2, 2, 2, 2], [1, 1, 1, 2, 1, 2, 2, 2, 5, 4, 3, 4, 3, 3, 3, 3, 3, 4, 3, 3, 4, 3, 4, 3, 4, 4, 3, 3, 2, 2, 2, 2], [2, 4, 2, 2, 1, 2, 2, 2, 3, 5, 5, 4, 4, 3, 4, 3, 5, 4, 4, 3, 4, 4, 4, 4, 4, 2, 3, 3, 2, 2, 2, 2], [2, 2, 2, 2, 1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 4, 4, 5, 5, 4, 4, 5, 5, 5, 2, 2, 2, 3, 3, 2, 2, 2, 2], [3, 2, 2, 2, 1, 1, 2, 2, 3, 3, 3, 2, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 2, 1, 2, 2, 3, 3, 2, 2, 2, 2], [3, 3, 2, 2, 1, 1, 2, 2, 2, 3, 3, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2], [3, 2, 2, 2, 3, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2]]


def get_colors_from_light_32x64():
    for y in range(64):
        tempdict = []
        for x in range(32):
            tempdict.append(get_number_by_light(rgb2light(*pix[12 + x * 30, 15 + y * 30])))
        d.append(tempdict)
        y += 1
    return d

def get_dictx16():
    dictx16 = dict()
    counter = 0
    for i in range(2):
        for j in range(8):
            tempylist = list()
            for y in range(j * 8, j * 8 + 8):
                tempxlist = list()
                for x in range(i * 16, i * 16 + 16):
                    print("x:{}, y:{}".format(x, y))
                    print("value:{}".format(list32x64[y][x]))
                    tempxlist.append(list32x64[y][x])
                tempylist.append(tempxlist)
            dictx16[str(counter)] = tempylist
            counter += 1
    return dictx16


list32x64 = get_colors_from_light_32x64()

print(get_dictx16())